package h1b.app;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class DE2 {
	public static class DE2Mapper extends
	Mapper<LongWritable, Text, Text, LongWritable> {

		public void map(LongWritable key, Text value, Context context
        ) throws IOException, InterruptedException {
			String record = value.toString();
			String[] parts = record.split("\t");
			String year = parts[7];
			String worksite = parts[8];
			String job = parts[4];
			if(job.equalsIgnoreCase("Data Engineer"))
			{
				context.write(new Text(worksite+"\t"+year), new LongWritable(1));
			}
		}
	}
	
	public static class CaderPartitioner extends
	   Partitioner < Text, LongWritable >
	   {
	      @Override
	      public int getPartition(Text key, LongWritable value, int numReduceTasks)
	      {
	         String[] str = key.toString().split("\t");
	         int year = Integer.parseInt(str[1]);


	         if(year==2011)
	         {
	            return 0;
	         }
	         else if(year==2012)
	         {
	            return 1 ;
	         }
	         else if(year==2013)
	         {
	            return 2;
	         }
	         else if(year == 2014)
	         {
	        	 return 3;
	         }
	         else if(year==2015)
	         {
	        	 return 4;
	         }
	         else if(year==2016)
	         {
	        	 return 5;
	         }
	         else
	         {
	        	 return 6;
	         }
	      }
	   }

	public static class DE2Reducer extends
	Reducer<Text, LongWritable, Text, LongWritable> 
	{
		String input="";
		long count;
		long max_count=0;
		public void reduce(Text key, Iterable<LongWritable> values,
				Context context) throws IOException, InterruptedException 
				{
			long count=0;
			for (LongWritable value : values) {
				count+=value.get();
			}
			if(count>max_count)
			{
				max_count=count;
				input=key.toString();
			}
			//context.write(key, new LongWritable(count));
				}
		protected void cleanup(Context context) throws IOException,
		InterruptedException {
			context.write(new Text(input), new LongWritable(max_count));
			}
	}
	
	public static void main(String[] args) throws Exception {
		
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "Data Engineer");
	    job.setJarByClass(DE2.class);
	    job.setMapperClass(DE2Mapper.class);
	    job.setPartitionerClass(CaderPartitioner.class);
	    job.setNumReduceTasks(7);
	    job.setReducerClass(DE2Reducer.class);
	    job.setMapOutputKeyClass(Text.class);
	    job.setMapOutputValueClass(LongWritable.class);
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(LongWritable.class);
	    FileInputFormat.addInputPath(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));
	    System.exit(job.waitForCompletion(true) ? 0 : 1);
	  }
